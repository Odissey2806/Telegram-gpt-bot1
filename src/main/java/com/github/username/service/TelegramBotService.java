package com.github.username.service;

import com.github.username.entity.User;
import com.github.username.entity.UsageHistory;
import com.github.username.repository.UserRepository;
import com.github.username.repository.UsageRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.Optional;

@Slf4j
@Service
@RequiredArgsConstructor
public class TelegramBotService {
    private final UserRepository userRepository;
    private final UsageRepository usageRepository;
    private final OpenAIService openAIService;
    private final PaymentService paymentService;
    private final TelegramMessageService messageService;

    @Value("${usage.daily.free:10}")
    private int dailyFreeLimit;

    @Transactional
    public void processMessage(Long chatId, String messageText, String firstName, String lastName, String username) {
        // –ù–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        User user = userRepository.findById(chatId)
                .orElseGet(() -> createNewUser(chatId, firstName, lastName, username));

        // –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        user.setLastActivity(LocalDateTime.now());

        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã
        user.resetDailyLimitIfNeeded();

        if (user.getDailyRequestsUsed() >= dailyFreeLimit && user.getBalance() <= 0) {
            String limitMessage = "‚ùå –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (" + dailyFreeLimit + ").\n\n" +
                    "üí≥ –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å:\n" +
                    "‚Ä¢ 10 –∑–∞–ø—Ä–æ—Å–æ–≤ - 1$\n" +
                    "‚Ä¢ 50 –∑–∞–ø—Ä–æ—Å–æ–≤ - 4$\n" +
                    "‚Ä¢ 100 –∑–∞–ø—Ä–æ—Å–æ–≤ - 7$\n\n" +
                    "–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /payment";

            messageService.sendMessage(chatId, limitMessage);
            return;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è"
        messageService.sendMessage(chatId, "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...");

        // –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç OpenAI
        String response;
        try {
            response = openAIService.getChatResponse(messageText);

            // –ó–∞–ø–∏—Å–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            UsageHistory usage = new UsageHistory();
            usage.setUser(user);
            usage.setMessage(messageText);
            usage.setResponse(response);
            usage.setTokensUsed(response.length() / 4);
            usage.setCost(0.0);

            usageRepository.save(usage);

            // –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏
            user.setDailyRequestsUsed(user.getDailyRequestsUsed() + 1);
            user.setTotalRequests(user.getTotalRequests() + 1);
            user.setLastRequestDate(LocalDateTime.now());

            userRepository.save(user);

        } catch (Exception e) {
            log.error("Error processing message", e);
            response = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        messageService.sendMessage(chatId, response);
    }

    private User createNewUser(Long chatId, String firstName, String lastName, String username) {
        User user = new User();
        user.setChatId(chatId);
        user.setFirstName(firstName);
        user.setLastName(lastName);
        user.setUsername(username);
        user.setPlan("FREE");
        user.setDailyRequestsUsed(0);
        user.setTotalRequests(0);
        user.setBalance(0.0);

        return userRepository.save(user);
    }

    public String getUserStats(Long chatId) {
        Optional<User> userOpt = userRepository.findById(chatId);
        if (userOpt.isEmpty()) {
            return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω";
        }

        User user = userOpt.get();
        user.resetDailyLimitIfNeeded(); // –û–±–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç—ã –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º

        return "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n" +
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: " + user.getDailyRequestsUsed() + "/" + dailyFreeLimit + "\n" +
                "‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: " + user.getTotalRequests() + "\n" +
                "‚Ä¢ –ë–∞–ª–∞–Ω—Å: $" + String.format("%.2f", user.getBalance()) + "\n" +
                "‚Ä¢ –¢–∞—Ä–∏—Ñ: " + (user.getPlan().equals("PREMIUM") ? "–ü—Ä–µ–º–∏—É–º" : "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π") + "\n\n" +
                "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å: /payment\n" +
                "üÜò –ü–æ–º–æ—â—å: /help";
    }
}
