package com.github.username.service;

import com.pengrad.telegrambot.TelegramBot;
import com.pengrad.telegrambot.model.request.LabeledPrice;
import com.pengrad.telegrambot.request.SendInvoice;
import com.pengrad.telegrambot.response.SendResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

@Slf4j
@Service
@RequiredArgsConstructor
public class TelegramPaymentService {

    private final TelegramBot bot;
    private final UserService userService;
    private final TelegramMessageService messageService;

    @Value("${telegram.payments.provider.token:}")
    private String providerToken;

    @Value("${payment.currency:RUB}")
    private String currency;

    private final Map<String, String> paymentSessions = new HashMap<>();

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram Payments
     */
    public boolean sendInvoice(Long chatId, String packageType) {
        if (providerToken == null || providerToken.isEmpty()) {
            log.error("Payment provider token is not configured");
            return false;
        }

        PackageInfo packageInfo = getPackageInfo(packageType);
        if (packageInfo == null) {
            log.error("Invalid package type: {}", packageType);
            return false;
        }

        try {
            // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π payload –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
            String payload = UUID.randomUUID().toString();

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å payload -> packageType
            paymentSessions.put(payload, packageType);

            log.info("Creating invoice for user {}: package {}, payload {}",
                    chatId, packageType, payload);

            // ‚úÖ –í–ê–†–ò–ê–ù–¢ 1: –ü–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ currency (–≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞)
            LabeledPrice[] prices = new LabeledPrice[]{
                    new LabeledPrice(packageInfo.getDescription(), packageInfo.getPrice())
            };

            SendInvoice invoice = new SendInvoice(
                    chatId,
                    packageInfo.getTitle(),
                    packageInfo.getDescription(),
                    payload,
                    providerToken,
                    prices  // –¢–æ–ª—å–∫–æ prices –±–µ–∑ currency
            )
                    .needPhoneNumber(false)
                    .needEmail(false)
                    .needShippingAddress(false)
                    .isFlexible(false)
                    .sendPhoneNumberToProvider(false)
                    .sendEmailToProvider(false);

            SendResponse response = bot.execute(invoice);

            if (response.isOk()) {
                log.info("‚úÖ Invoice sent successfully to user {} for package {}", chatId, packageType);
                return true;
            } else {
                log.error("‚ùå Failed to send invoice: {}", response.description());
                return false;
            }

        } catch (Exception e) {
            log.error("‚ùå Error sending invoice", e);
            return false;
        }
    }

    /**
     * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
     */
    public boolean sendInvoiceAlternative(Long chatId, String packageType) {
        try {
            PackageInfo packageInfo = getPackageInfo(packageType);
            if (packageInfo == null) return false;

            String payload = UUID.randomUUID().toString();
            paymentSessions.put(payload, packageType);

            log.info("Creating invoice (alternative) for user {}: package {}", chatId, packageType);

            // ‚úÖ –í–ê–†–ò–ê–ù–¢ 2: –ò—Å–ø–æ–ª—å–∑—É–µ–º builder pattern –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            LabeledPrice price = new LabeledPrice(packageInfo.getDescription(), packageInfo.getPrice());

            SendInvoice invoice = new SendInvoice(
                    chatId,
                    packageInfo.getTitle(),
                    packageInfo.getDescription(),
                    payload,
                    providerToken,
                    price  // –ü–µ—Ä–µ–¥–∞–µ–º –æ–¥–∏–Ω price –æ–±—ä–µ–∫—Ç
            );

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            invoice.needPhoneNumber(false)
                    .needEmail(false)
                    .needShippingAddress(false)
                    .isFlexible(false);

            SendResponse response = bot.execute(invoice);

            return response.isOk();

        } catch (Exception e) {
            log.error("‚ùå Error sending invoice (alternative)", e);
            return false;
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
     */
    public void handleSuccessfulPayment(String payload, Long chatId) {
        try {
            String packageType = paymentSessions.get(payload);
            if (packageType == null) {
                log.error("‚ùå Payment session not found for payload: {}", payload);
                return;
            }

            paymentSessions.remove(payload);

            PackageInfo packageInfo = getPackageInfo(packageType);
            if (packageInfo != null) {
                double amountInUsd = convertToUsd(packageInfo.getPrice(), packageInfo.getCurrency());
                userService.updateUserBalance(chatId, amountInUsd);

                double newBalance = getUserBalance(chatId);

                log.info("‚úÖ Payment processed for user {}: {} requests (${})",
                        chatId, packageInfo.getRequests(), amountInUsd);

                String message = "‚úÖ **–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!** üéâ\n\n" +
                        "üí≥ –°—É–º–º–∞: " + (packageInfo.getPrice() / 100) + " RUB\n" +
                        "üì¶ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: " + packageInfo.getRequests() + "\n" +
                        "üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: $" + String.format("%.2f", newBalance) + "\n\n" +
                        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º! üöÄ";

                messageService.sendMessage(chatId, message);
            }
        } catch (Exception e) {
            log.error("‚ùå Error processing payment", e);
        }
    }

    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private double getUserBalance(Long chatId) {
        try {
            String stats = userService.getUserStats(chatId);
            if (stats.contains("–ë–∞–ª–∞–Ω—Å: $")) {
                int start = stats.indexOf("–ë–∞–ª–∞–Ω—Å: $") + 9;
                int end = stats.indexOf("\n", start);
                if (end == -1) end = stats.length();

                String balanceStr = stats.substring(start, end).trim();
                return Double.parseDouble(balanceStr);
            }
        } catch (Exception e) {
            log.error("‚ùå Error parsing user balance", e);
        }
        return 0.0;
    }

    public String getPackageTypeByPayload(String payload) {
        return paymentSessions.get(payload);
    }

    private PackageInfo getPackageInfo(String packageType) {
        switch (packageType) {
            case "10":
                return new PackageInfo("10 –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AI",
                        "–ü–∞–∫–µ—Ç –∏–∑ 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ ChatGPT",
                        10000, "RUB", 10);
            case "50":
                return new PackageInfo("50 –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AI",
                        "–ü–∞–∫–µ—Ç –∏–∑ 50 –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ ChatGPT (–≤—ã–≥–æ–¥–Ω–æ!)",
                        40000, "RUB", 50);
            case "100":
                return new PackageInfo("100 –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AI",
                        "–ü–∞–∫–µ—Ç –∏–∑ 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ ChatGPT (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã–≥–æ–¥–∞!)",
                        70000, "RUB", 100);
            default:
                return null;
        }
    }

    private double convertToUsd(int amount, String currency) {
        if ("RUB".equals(currency)) {
            return amount / 100.0 / 90.0;
        }
        return amount / 100.0;
    }

    private static class PackageInfo {
        private final String title;
        private final String description;
        private final int price;
        private final String currency;
        private final int requests;

        public PackageInfo(String title, String description, int price, String currency, int requests) {
            this.title = title;
            this.description = description;
            this.price = price;
            this.currency = currency;
            this.requests = requests;
        }

        public String getTitle() { return title; }
        public String getDescription() { return description; }
        public int getPrice() { return price; }
        public String getCurrency() { return currency; }
        public int getRequests() { return requests; }
    }
}