package com.github.username.service;

import com.github.username.entity.User;
import com.github.username.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.Optional;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 * –°–æ–¥–µ—Ä–∂–∏—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class UserService {

    private final UserRepository userRepository;

    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @Transactional
    public User createUser(Long chatId, String firstName, String lastName, String username) {
        User user = new User();
        user.setChatId(chatId);
        user.setFirstName(firstName);
        user.setLastName(lastName != null ? lastName : "");
        user.setUsername(username != null ? username : "");
        user.setPlan("FREE");
        user.setDailyRequestsUsed(0);
        user.setTotalRequests(0);
        user.setBalance(0.0);

        User savedUser = userRepository.save(user);
        log.info("Created new user: {} (chatId: {})", firstName, chatId);

        return savedUser;
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chatId –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ
     */
    @Transactional
    public User findOrCreateUser(Long chatId, String firstName, String lastName, String username) {
        return userRepository.findById(chatId)
                .orElseGet(() -> createUser(chatId, firstName, lastName, username));
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @Transactional
    public void updateUserBalance(Long chatId, double amount) {
        Optional<User> userOpt = userRepository.findById(chatId);
        if (userOpt.isPresent()) {
            User user = userOpt.get();
            user.setBalance(user.getBalance() + amount);
            userRepository.save(user);
            log.info("Updated balance for user {}: +${}", chatId, amount);
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public String getUserStats(Long chatId) {
        Optional<User> userOpt = userRepository.findById(chatId);
        if (userOpt.isEmpty()) {
            return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω";
        }

        User user = userOpt.get();
        user.resetDailyLimitIfNeeded(); // –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã

        return "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n" +
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: " + user.getDailyRequestsUsed() + "/10\n" +
                "‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: " + user.getTotalRequests() + "\n" +
                "‚Ä¢ –ë–∞–ª–∞–Ω—Å: $" + String.format("%.2f", user.getBalance()) + "\n" +
                "‚Ä¢ –¢–∞—Ä–∏—Ñ: " + (user.getPlan().equals("PREMIUM") ? "–ü—Ä–µ–º–∏—É–º" : "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π") + "\n\n" +
                "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å: /payment\n" +
                "üÜò –ü–æ–º–æ—â—å: /help";
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å
     */
    public boolean canUserMakeRequest(Long chatId) {
        Optional<User> userOpt = userRepository.findById(chatId);
        if (userOpt.isEmpty()) {
            return false;
        }

        User user = userOpt.get();
        user.resetDailyLimitIfNeeded();

        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –µ—Å–ª–∏:
        // 1. –ù–µ –ø—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ò–õ–ò
        // 2. –ï—Å—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        return user.getDailyRequestsUsed() < 10 || user.getBalance() > 0;
    }
}