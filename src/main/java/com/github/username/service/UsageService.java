package com.github.username.service;

import com.github.username.entity.UsageHistory;
import com.github.username.entity.User;
import com.github.username.repository.UsageRepository;
import com.github.username.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.Optional;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É—á–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–¥—Å—á–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –ª–∏–º–∏—Ç—ã –∏ –∏—Å—Ç–æ—Ä–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class UsageService {

    private final UsageRepository usageRepository;
    private final UserRepository userRepository;

    @Value("${usage.daily.free:10}")
    private int dailyFreeLimit;

    @Value("${usage.price.per.request:0.10}")
    private double pricePerRequest;

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç—ã, —Å–ø–∏—Å—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
     */
    @Transactional
    public boolean registerUsage(Long chatId, String message, String response) {
        Optional<User> userOpt = userRepository.findById(chatId);
        if (userOpt.isEmpty()) {
            log.error("User not found for chatId: {}", chatId);
            return false;
        }

        User user = userOpt.get();
        user.resetDailyLimitIfNeeded(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å
        if (!canMakeRequest(user)) {
            log.warn("User {} exceeded limits", chatId);
            return false;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
        double cost = 0.0;
        if (user.getDailyRequestsUsed() >= dailyFreeLimit) {
            cost = pricePerRequest; // –°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        if (cost > 0 && user.getBalance() < cost) {
            log.warn("Insufficient balance for user {}: ${} < ${}",
                    chatId, user.getBalance(), cost);
            return false;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.setDailyRequestsUsed(user.getDailyRequestsUsed() + 1);
        user.setTotalRequests(user.getTotalRequests() + 1);
        user.setLastRequestDate(LocalDateTime.now());

        if (cost > 0) {
            user.setBalance(user.getBalance() - cost);
            log.info("Charged user {}: ${} for request", chatId, cost);
        }

        userRepository.save(user);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        UsageHistory usage = new UsageHistory();
        usage.setUser(user);
        usage.setMessage(truncateMessage(message, 4000));
        usage.setResponse(truncateMessage(response, 4000));
        usage.setTokensUsed(calculateTokens(response));
        usage.setCost(cost);

        usageRepository.save(usage);

        log.debug("Registered usage for user {}: daily={}/{}",
                chatId, user.getDailyRequestsUsed(), dailyFreeLimit);

        return true;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å
     */
    public boolean canMakeRequest(User user) {
        user.resetDailyLimitIfNeeded();

        // –ï—Å–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç - –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ
        if (user.getDailyRequestsUsed() < dailyFreeLimit) {
            return true;
        }

        // –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        return user.getBalance() >= pricePerRequest;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public String getUsageInfo(Long chatId) {
        Optional<User> userOpt = userRepository.findById(chatId);
        if (userOpt.isEmpty()) {
            return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω";
        }

        User user = userOpt.get();
        user.resetDailyLimitIfNeeded();

        int remainingFree = Math.max(0, dailyFreeLimit - user.getDailyRequestsUsed());
        int remainingPaid = (int) (user.getBalance() / pricePerRequest);

        StringBuilder info = new StringBuilder();
        info.append("üìä –õ–∏–º–∏—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n\n");
        info.append("‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ")
                .append(user.getDailyRequestsUsed()).append("/").append(dailyFreeLimit)
                .append(" (–æ—Å—Ç–∞–ª–æ—Å—å: ").append(remainingFree).append(")\n");

        if (remainingFree == 0) {
            info.append("‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ –ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ").append(remainingPaid).append("\n");
            info.append("‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞: $").append(String.format("%.2f", pricePerRequest)).append("\n");
            info.append("‚Ä¢ –í–∞—à –±–∞–ª–∞–Ω—Å: $").append(String.format("%.2f", user.getBalance())).append("\n");
        }

        info.append("\nüí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å: /payment");

        return info.toString();
    }

    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤
     */
    private int calculateTokens(String text) {
        // –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç: –ø—Ä–∏–º–µ—Ä–Ω–æ 1 —Ç–æ–∫–µ–Ω = 4 —Å–∏–º–≤–æ–ª–∞
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä OpenAI
        return text.length() / 4;
    }

    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    private String truncateMessage(String text, int maxLength) {
        if (text.length() <= maxLength) {
            return text;
        }
        return text.substring(0, maxLength - 3) + "...";
    }
}
