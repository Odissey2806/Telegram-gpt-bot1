package com.github.username.service;

import com.github.username.entity.Payment;
import com.github.username.entity.User;
import com.github.username.repository.PaymentRepository;
import com.github.username.repository.UserRepository;
import com.stripe.Stripe;
import com.stripe.exception.StripeException;
import com.stripe.model.checkout.Session;
import com.stripe.param.checkout.SessionCreateParams;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import jakarta.annotation.PostConstruct;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ Stripe
 * –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫–∏
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class PaymentService {

    private final UserRepository userRepository;
    private final PaymentRepository paymentRepository;

    @Value("${stripe.secret.key:}")
    private String stripeSecretKey;

    @Value("${stripe.success.url:}")
    private String successUrl;

    @Value("${stripe.cancel.url:}")
    private String cancelUrl;

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Stripe API –∫–ª—é—á–∞
     */
    @PostConstruct
    public void init() {
        if (stripeSecretKey != null && !stripeSecretKey.isEmpty()) {
            Stripe.apiKey = stripeSecretKey;
            log.info("Stripe initialized successfully");
        } else {
            log.warn("Stripe secret key is not set");
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –æ–ø–ª–∞—Ç—ã –≤ Stripe
     *
     * @param chatId ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param packageType —Ç–∏–ø –ø–∞–∫–µ—Ç–∞ (10, 50, 100 –∑–∞–ø—Ä–æ—Å–æ–≤)
     * @return URL –¥–ª—è redirect –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã Stripe
     */
    public String createPaymentSession(Long chatId, String packageType) {
        if (stripeSecretKey == null || stripeSecretKey.isEmpty()) {
            log.error("Stripe is not configured");
            return null;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–∏–ø—É –ø–∞–∫–µ—Ç–∞
        Map<String, Object> packageInfo = getPackageInfo(packageType);
        if (packageInfo == null) {
            log.error("Invalid package type: {}", packageType);
            return null;
        }

        long amount = (long) packageInfo.get("amount");
        int requests = (int) packageInfo.get("requests");
        String description = (String) packageInfo.get("description");

        try {
            // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–µ—Å—Å–∏–∏ Stripe Checkout
            SessionCreateParams params = SessionCreateParams.builder()
                    .setMode(SessionCreateParams.Mode.PAYMENT)
                    .setSuccessUrl(successUrl + "?session_id={CHECKOUT_SESSION_ID}")
                    .setCancelUrl(cancelUrl)
                    .addLineItem(
                            SessionCreateParams.LineItem.builder()
                                    .setQuantity(1L)
                                    .setPriceData(
                                            SessionCreateParams.LineItem.PriceData.builder()
                                                    .setCurrency("usd")
                                                    .setUnitAmount(amount) // –°—É–º–º–∞ –≤ —Ü–µ–Ω—Ç–∞—Ö
                                                    .setProductData(
                                                            SessionCreateParams.LineItem.PriceData.ProductData.builder()
                                                                    .setName(description)
                                                                    .setDescription("–ü–∞–∫–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AI –ø–æ–º–æ—â–Ω–∏–∫—É")
                                                                    .build())
                                                    .build())
                                    .build())
                    .putMetadata("chatId", chatId.toString())
                    .putMetadata("packageType", packageType)
                    .putMetadata("requests", String.valueOf(requests))
                    .build();

            // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –≤ Stripe
            Session session = Session.create(params);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –±–∞–∑—É
            savePendingPayment(chatId, session.getId(), amount, requests);

            log.info("Created Stripe session {} for user {}", session.getId(), chatId);
            return session.getUrl();

        } catch (StripeException e) {
            log.error("Error creating Stripe session", e);
            return null;
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–µ—Ç–∞—Ö
     */
    public String getPaymentOptions(Long chatId) {
        return "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤:\n\n" +
                "1. 10 –∑–∞–ø—Ä–æ—Å–æ–≤ - $1.00\n" +
                "   –ö–æ–º–∞–Ω–¥–∞: /buy_10\n\n" +
                "2. 50 –∑–∞–ø—Ä–æ—Å–æ–≤ - $4.00 (—ç–∫–æ–Ω–æ–º–∏—è $1.00)\n" +
                "   –ö–æ–º–∞–Ω–¥–∞: /buy_50\n\n" +
                "3. 100 –∑–∞–ø—Ä–æ—Å–æ–≤ - $7.00 (—ç–∫–æ–Ω–æ–º–∏—è $3.00)\n" +
                "   –ö–æ–º–∞–Ω–¥–∞: /buy_100\n\n" +
                "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞–ø—Ä–æ—Å—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤—è—Ç—Å—è –∫ –≤–∞—à–µ–º—É –±–∞–ª–∞–Ω—Å—É!";
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –∏–∑ Stripe webhook
     */
    public void handleSuccessfulPayment(String stripeSessionId) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏ –∏–∑ Stripe
            Session session = Session.retrieve(stripeSessionId);

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            String chatIdStr = session.getMetadata().get("chatId");
            String packageType = session.getMetadata().get("packageType");
            String requestsStr = session.getMetadata().get("requests");

            if (chatIdStr == null || requestsStr == null) {
                log.error("Missing metadata in Stripe session: {}", stripeSessionId);
                return;
            }

            Long chatId = Long.parseLong(chatIdStr);
            int requests = Integer.parseInt(requestsStr);

            // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            Optional<User> userOpt = userRepository.findById(chatId);
            if (userOpt.isEmpty()) {
                log.error("User not found for chatId: {}", chatId);
                return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            User user = userOpt.get();
            double amountPerRequest = getAmountPerRequest(packageType);
            double totalAmount = requests * amountPerRequest;

            user.setBalance(user.getBalance() + totalAmount);
            userRepository.save(user);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–∞–∑–µ
            updatePaymentStatus(stripeSessionId, "completed");

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            log.info("Payment completed for user {}: {} requests (${})",
                    chatId, requests, totalAmount);

        } catch (StripeException e) {
            log.error("Error retrieving Stripe session", e);
        } catch (NumberFormatException e) {
            log.error("Invalid metadata format in Stripe session", e);
        }
    }

    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ—Ç–∞—Ö
     */
    private Map<String, Object> getPackageInfo(String packageType) {
        Map<String, Object> info = new HashMap<>();

        switch (packageType) {
            case "10":
                info.put("amount", 100L); // $1.00 –≤ —Ü–µ–Ω—Ç–∞—Ö
                info.put("requests", 10);
                info.put("description", "10 –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AI");
                break;
            case "50":
                info.put("amount", 400L); // $4.00 –≤ —Ü–µ–Ω—Ç–∞—Ö
                info.put("requests", 50);
                info.put("description", "50 –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AI");
                break;
            case "100":
                info.put("amount", 700L); // $7.00 –≤ —Ü–µ–Ω—Ç–∞—Ö
                info.put("requests", 100);
                info.put("description", "100 –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AI");
                break;
            default:
                return null;
        }

        return info;
    }

    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ - —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ø–∞–∫–µ—Ç–µ
     */
    private double getAmountPerRequest(String packageType) {
        switch (packageType) {
            case "10": return 0.10; // $0.10 –∑–∞ –∑–∞–ø—Ä–æ—Å
            case "50": return 0.08; // $0.08 –∑–∞ –∑–∞–ø—Ä–æ—Å
            case "100": return 0.07; // $0.07 –∑–∞ –∑–∞–ø—Ä–æ—Å
            default: return 0.10;
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ pending –ø–ª–∞—Ç–µ–∂–µ
     */
    private void savePendingPayment(Long chatId, String stripePaymentId, long amount, int requests) {
        Optional<User> userOpt = userRepository.findById(chatId);
        if (userOpt.isPresent()) {
            Payment payment = new Payment();
            payment.setUser(userOpt.get());
            payment.setStripePaymentId(stripePaymentId);
            payment.setAmount(amount / 100.0); // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—Ç—ã –≤ –¥–æ–ª–ª–∞—Ä—ã
            payment.setCurrency("USD");
            payment.setStatus("pending");
            payment.setRequestsPurchased(requests);

            paymentRepository.save(payment);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
     */
    private void updatePaymentStatus(String stripePaymentId, String status) {
        paymentRepository.findAll().stream()
                .filter(p -> stripePaymentId.equals(p.getStripePaymentId()))
                .findFirst()
                .ifPresent(payment -> {
                    payment.setStatus(status);
                    paymentRepository.save(payment);
                });
    }
}
