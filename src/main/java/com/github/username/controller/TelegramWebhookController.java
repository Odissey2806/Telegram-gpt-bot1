package com.github.username.controller;

import com.fasterxml.jackson.databind.JsonNode;
import com.github.username.service.TelegramBotService;
import com.github.username.service.TelegramMessageService;
import com.github.username.service.PaymentService; // ‚Üê –î–û–ë–ê–í–¨ –≠–¢–û–¢ –ò–ú–ü–û–†–¢
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@Slf4j
@RestController
@RequestMapping("/webhook")
@RequiredArgsConstructor
public class TelegramWebhookController {
    private final TelegramBotService botService;
    private final TelegramMessageService messageService;
    private final PaymentService paymentService; // ‚Üê –î–û–ë–ê–í–¨ –≠–¢–£ –ó–ê–í–ò–°–ò–ú–û–°–¢–¨

    @Value("${bot.webhook.secret:}")
    private String expectedSecret;

    @PostMapping
    public ResponseEntity<String> handleUpdate(
            @RequestHeader(value = "X-Telegram-Bot-Api-Secret-Token", required = false) String secret,
            @RequestBody JsonNode update) {

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞
        if (expectedSecret != null && !expectedSecret.isEmpty() &&
                !expectedSecret.equals(secret)) {
            return ResponseEntity.status(403).body("Invalid secret");
        }

        try {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            processUpdate(update);
            return ResponseEntity.ok("OK");

        } catch (Exception e) {
            log.error("Error processing update", e);
            return ResponseEntity.ok("OK"); // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 Telegram
        }
    }

    private void processUpdate(JsonNode update) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if (update.has("message") && update.get("message").has("text")) {
            JsonNode message = update.get("message");
            Long chatId = message.get("chat").get("id").asLong();
            String text = message.get("text").asText();
            String firstName = message.get("chat").get("first_name").asText();
            String lastName = message.get("chat").has("last_name") ?
                    message.get("chat").get("last_name").asText() : "";
            String username = message.get("chat").has("username") ?
                    message.get("chat").get("username").asText() : "";

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if (text.startsWith("/")) {
                handleCommand(chatId, text, firstName);
            } else {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                handleTextMessage(chatId, text, firstName, lastName, username);
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ–ø–ª–∞—Ç—ã
        if (update.has("callback_query")) {
            handleCallbackQuery(update.get("callback_query"));
        }
    }

    private void handleCommand(Long chatId, String command, String firstName) {
        switch (command) {
            case "/start":
                String welcomeMessage = "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, " + firstName + "!\n\n" +
                        "–Ø - AI –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ ChatGPT. –ó–∞–¥–∞–≤–∞–π—Ç–µ –º–Ω–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã!\n\n" +
                        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: /stats\n" +
                        "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å: /payment\n" +
                        "üÜò –ü–æ–º–æ—â—å: /help\n\n" +
                        "–°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å " + 10 + " –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤!";
                messageService.sendMessage(chatId, welcomeMessage);
                break;

            case "/stats":
                String stats = botService.getUserStats(chatId);
                messageService.sendMessage(chatId, stats);
                break;

            case "/payment":
                // ‚úÖ –¢–ï–ü–ï–†–¨ paymentService –î–û–°–¢–£–ü–ï–ù
                String paymentInfo = paymentService.getPaymentOptions(chatId);
                messageService.sendMessage(chatId, paymentInfo);
                break;

            case "/buy_10":
                handleBuyCommand(chatId, "10");
                break;

            case "/buy_50":
                handleBuyCommand(chatId, "50");
                break;

            case "/buy_100":
                handleBuyCommand(chatId, "100");
                break;

            case "/help":
                String helpMessage = "üÜò –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n" +
                        "‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å - –∏ —è –æ—Ç–≤–µ—á—É!\n" +
                        "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å\n" +
                        "‚Ä¢ –ü–æ—Å–ª–µ –ª–∏–º–∏—Ç–∞ - –ø–æ–ø–æ–ª–Ω—è–π—Ç–µ –±–∞–ª–∞–Ω—Å\n" +
                        "‚Ä¢ 10 –∑–∞–ø—Ä–æ—Å–æ–≤ = 1$\n" +
                        "‚Ä¢ 50 –∑–∞–ø—Ä–æ—Å–æ–≤ = 4$ (—ç–∫–æ–Ω–æ–º–∏—è 1$)\n" +
                        "‚Ä¢ 100 –∑–∞–ø—Ä–æ—Å–æ–≤ = 7$ (—ç–∫–æ–Ω–æ–º–∏—è 3$)\n\n" +
                        "–ö–æ–º–∞–Ω–¥—ã:\n" +
                        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n" +
                        "/stats - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n" +
                        "/payment - –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å\n" +
                        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞";
                messageService.sendMessage(chatId, helpMessage);
                break;

            default:
                messageService.sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.");
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–∫—É–ø–∫–∏ –ø–∞–∫–µ—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    private void handleBuyCommand(Long chatId, String packageType) {
        try {
            String paymentUrl = paymentService.createPaymentSession(chatId, packageType);
            if (paymentUrl != null) {
                String message = "üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n" + paymentUrl +
                        "\n\n–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∑–∞–ø—Ä–æ—Å—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤—è—Ç—Å—è –∫ –≤–∞—à–µ–º—É –±–∞–ª–∞–Ω—Å—É!";
                messageService.sendMessage(chatId, message);
            } else {
                messageService.sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–µ—Å—Å–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            }
        } catch (Exception e) {
            log.error("Error creating payment session for user {}", chatId, e);
            messageService.sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.");
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback_query –æ—Ç inline –∫–Ω–æ–ø–æ–∫
     */
    private void handleCallbackQuery(JsonNode callbackQuery) {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∏–ª–∏ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
        log.info("Callback query received: {}", callbackQuery);
    }

    private void handleTextMessage(Long chatId, String text, String firstName, String lastName, String username) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        new Thread(() -> {
            try {
                // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: processMessage —Ç–µ–ø–µ—Ä—å void, –Ω–µ –æ–∂–∏–¥–∞–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                botService.processMessage(chatId, text, firstName, lastName, username);
                // –û—Ç–≤–µ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–Ω—É—Ç—Ä–∏ processMessage —á–µ—Ä–µ–∑ messageService
            } catch (Exception e) {
                log.error("Error processing message", e);
                messageService.sendMessage(chatId, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            }
        }).start();
    }
}